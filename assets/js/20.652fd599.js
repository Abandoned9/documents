(window.webpackJsonp=window.webpackJsonp||[]).push([[20],{595:function(e,l,t){"use strict";t.r(l);var i=t(6),n=Object(i.a)({},(function(){var e=this,l=e.$createElement,t=e._self._c||l;return t("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[t("div",{staticClass:"custom-block tip"},[t("p",{staticClass:"title"}),t("p",[e._v("Ribbon是一个客户端负载均衡器，它负责的是从一组实例中挑选合适的实例来运行服务，它的挑选方式取决于"),t("strong",[e._v("负载均衡策略")])]),e._v(" "),t("p",[e._v("这里主要是记录和简单介绍Ribbon核心组件IRule")])]),e._v(" "),t("p",[e._v("Ribbon核心组件IRule是负载均衡策略接口，有如下实现，仅供了解：")]),e._v(" "),t("ul",[t("li",[e._v("RoundRobinRule(默认):轮询，即按一定的顺序轮换获取实例地址；")]),e._v(" "),t("li",[e._v("RandomRule:随机，即以随机的方式获取实例的地址；")]),e._v(" "),t("li",[e._v("AvailabilityFilteringRule:首先会过滤由于多次访问故障而处于断路由跳闸状态的服务，以及并发数量超过\n阈值的服务，然后对剩下的服务列表按照轮询策略进行访问；")]),e._v(" "),t("li",[e._v("WeightedResponseTimeRule:根据平均响应时间计算所有服务的权重，响应时间越快，服务权重越大，被选中的几率越高；")])]),e._v(" "),t("div",{staticClass:"custom-block tip"},[t("p",{staticClass:"title"}),t("p",[e._v("刚启动时，如果统计信息不足，则使用RoundRobinRule策略，等统计信息足够时，会切换到WeightedResponseTimeRule；")])]),t("ul",[t("li",[e._v("RetryRule:先按照RoundRobinRule的策略获取服务，如果获取服务失败，则在指定时间内进行重试，获取可用的服务；")]),e._v(" "),t("li",[e._v("BestAvailableRule:首先会过滤由于多次访问故障而处于断路由跳闸状态的服务，然后选择一个并发服务；")]),e._v(" "),t("li",[e._v("ZoneAvoidanceRule:默认规则，符合判断服务所在区域的性能和服务的可用性选择服务；")])])])}),[],!1,null,null,null);l.default=n.exports}}]);